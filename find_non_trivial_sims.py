"""
Find the proton angles and energies that are worth simulating in detail
"""
import trim_config
import trim_helper
import numpy as np

#find upper and lower interesting energies for every incident angle
def find_energy_bounds(): #file is csv, could be generated by import spectra
    energies = trim_helper.simulated_spectrum[0]
    #bounds of the interesting energies
    lower_energies_idx = []
    upper_energies_idx = []
    for angle in trim_config.angles[0:-1]: #don't actually run 90deg
        lower_energy = find_bound(angle, type = 'lower')
        lower_energies_idx.append(lower_energy)
        upper_energy = find_bound(angle, type = 'upper')
        upper_energies_idx.append(upper_energy)
        print(f'Interesting energies for angle {angle:.1f} are {energies[lower_energy]:.2e} and {energies[upper_energy]:.2e}')
    return np.transpose([np.array(lower_energies_idx), np.array(upper_energies_idx)])
#find the upper or lower bound on the interesting energies for a given angle of incidence
#returns the energy and its index
def find_bound(angle, type):
    energies = trim_helper.simulated_spectrum[0]
    def f(energy):
        return test_interesting(angle, energy, type)
    left_bound = trim_helper.bisect_search(energies, f)
    left_idx = left_bound[0]
    if type == 'lower':
        left_idx = max(0, left_idx - trim_config.safety_idx)#update idx for safety and include wrap-around protection
    elif type == 'upper':
        left_idx = min(len(energies) - 1, left_idx + trim_config.safety_idx + 1) #extra plus 1 is because the binary search returns index to the left of the zero
    return left_idx

#for testing if an energy could be useful as a lower or upper bound for full blocking/transmission
def test_interesting(angle, energy, type):
    if type == 'lower':
        proton_number = trim_config.number_test_block
    if type == 'upper':
        proton_number = trim_config.number_test_transmit
    #setup the TRIM simulation
    trim_helper.config_trim(energy, trim_config.shield_thickness, angle, proton_number)
    trim_helper.run_trim()
    data = trim_helper.read_transmission(trim_config.trim_transmit)
    #return logic
    if type == 'lower':
        if len(data) ==0: #all protons were blocked
            return -1
        else:
            return 1
    if type == 'upper':
        if len(data) == proton_number: #all protons transmitted
            return 1
        else:
            return -1

if __name__ == '__main__':
    #foo = test_interesting(20, 0.19, 'lower')
    #foo = find_bound(0, trim_helper.get_spectrum_energies(), 'lower')
    foo = find_energy_bounds()
    print(foo)
"""
Find the proton angles and energies that are worth simulating in detail
"""
import trim_config
import trim_helper
import numpy as np

#find upper and lower interesting energies for every incident angle
def find_energy_bounds(spectrum_file): #file is csv, could be generated by import spectra
    #import spectrum
    energies = trim_helper.get_spectrum_energies()
    #bounds of the interesting energies
    lower_energies = []
    upper_energies = []
    for angle in trim_config.angles:
        lower_energy = find_bound(angle, energies, type = 'lower')
        lower_energies.append(lower_energy)
        upper_energy = find_bound(angle, energies, type = 'upper')
        upper_energies.append(lower_energy)

def find_bound(angle, energies, type):
    def f(energy):
        return test_interesting(angle, energy, type)
    left_bound = trim_helper.bisect_search(energies, f)
    return left_bound


def test_interesting(angle, energy, type):
    if type == 'lower':
        proton_number = trim_config.number_test_block
    if type == 'upper':
        proton_number = trim_config.number_test_transmit
    #setup the TRIM simulation
    trim_helper.config_trim(energy, trim_config.shield_thickness, angle, proton_number)
    trim_helper.run_trim()
    data = trim_helper.read_transmission(trim_config.trim_transmit)
    #return logic
    if type == 'lower':
        if len(data) ==0: #all protons were blocked
            return -1
        else:
            return 1
    if type == 'upper':
        if len(data) == proton_number: #all protons transmitted
            return 1
        else:
            return -1

if __name__ == '__main__':
    #foo = test_interesting(20, 0.19, 'lower')
    foo = find_bound(20, trim_helper.get_spectrum_energies(), 'upper')
    print(foo)
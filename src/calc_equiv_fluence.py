"""
Module that calculates the equivalent fluences using RDCs
"""
import numpy as np
import pandas as pd
import config
import scipy.optimize
import trim_helper

def load_proton_rdc(rdc_file):
    """load rdc file and interpolate it onto the damage energy grid

    Use power law extrapolation for the UV and IR"""
    #load rdc file
    rdc = pd.read_csv(rdc_file)
    rdc = rdc.to_numpy()
    #get the data for fitting
    ir_data = rdc[:trim_config.POWER_LAW_FIT_POINTS]
    uv_data = rdc[-trim_config.POWER_LAW_FIT_POINTS:]
    #do the fit
    ir_fit, ir_cov = scipy.optimize.curve_fit(power_law, ir_data[:, 0], ir_data[:, 1], sigma = trim_config.CURVE_FIT_SIGMA)
    uv_fit, ir_cov = scipy.optimize.curve_fit(power_law, uv_data[:, 0], uv_data[:, 1], sigma = trim_config.CURVE_FIT_SIGMA)
    #do the interpolation
    new_rdc = []
    for energy in trim_helper.DAMAGE_ENERGIES:
        #IR_case
        if energy < min(rdc[:,0]):
            new_rdc.append(power_law(energy, *ir_fit))
        #interpolate case
        if (energy >= min(rdc[:,0])) and (energy <= max(rdc[:,0])):
            new_rdc.append(np.interp(energy, rdc[:,0], rdc[:,1]))
        #UV case
        if energy > max(rdc[:,0]):
            new_rdc.append(power_law(energy, *uv_fit))
    return new_rdc

def power_law(x, a, b):
    return a * x**b

def calc_fluence(slowed_spectrum, rdc, factor):
    """Calculate the equivalent fluence for 10MeV protons if factor = 1.

    Arguments are a slowed spectrum generated by calc_transmitted_spectrum,
    and RDC curve generated from load_proton_rdc, and a factor for converting
    to other particles
    """
    ret = np.dot(slowed_spectrum, rdc) * factor
    #ta-da
    return ret

if __name__ == "__main__":
    # foo = load_proton_rdc(trim_config.PROTON_RDC_FILE)
    import matplotlib.pyplot as plt
    # plt.plot(trim_helper.DAMAGE_ENERGIES, foo)
    # raw_rdc = pd.read_csv(trim_config.PROTON_RDC_FILE).to_numpy()
    # plt.plot(raw_rdc[:,0], raw_rdc[:,1])
    # plt.yscale('log')
    # plt.xscale('log')
    # plt.show()
    import calc_transmitted_spectrum
    calc_transmitted_spectrum.calc_scattering_matrix()
    spectrum = calc_transmitted_spectrum.calc_transmitted_spectrum()
    plt.plot(trim_helper.DAMAGE_ENERGIES, trim_helper.calc_IFlux(spectrum))
    plt.xscale('log')
    #plt.yscale('log')
    plt.show()


    rdc = load_proton_rdc(trim_config.PROTON_RDC_FILE)
    foo = calc_fluence(spectrum, rdc, trim_config.POWER_PROTONS_TO_ELECTRONS)
    print(f'{foo:.2e}')